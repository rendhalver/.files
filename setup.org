#+TITLE: Computamatron setup

Setup and maintain software on my various laptops

* install
  :PROPERTIES:
  :header-args: :tangle yes
  :END:

** Set our OS type

   Set our OS type so we can use it to download binaries

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     OS_TYPE='linux-amd64'
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
     OS_TYPE='darwin-amd64'
   #+END_SRC

** install jq

   Install jq so we can use it to parse json data

   #+BEGIN_SRC sh
     if ! [ -x "$(command -v jq)" ]; then
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
       brew install jq
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
       sudo apt install -y jq
   #+END_SRC

   #+BEGIN_SRC sh
     fi
   #+END_SRC

** Global base dependencies

   Define the list of applications we need for pretty much everything on all platforms

   #+BEGIN_SRC sh
     GLOBAL_DEP_LIST='automake autoconf libtool unzip curl'
   #+END_SRC

** base dependencies

   Define the list of dependencies we need for each platform

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     DEP_LIST="$GLOBAL_DEP_LIST dnsutils rblcheck libreadline-dev libncurses-dev libssl-dev libyaml-dev libxslt-dev libffi-dev unixodbc-dev phantomjs inkscape"
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
     DEP_LIST="$GLOBAL_DEP_LIST wget readline ncurses openssl libyaml libxslt libffi unixodbc"
   #+END_SRC

** Install dependencies

   Install the dependencies we defined earlier

   #+BEGIN_SRC sh
     for app in $DEP_LIST; do
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
       sudo apt install -y $app
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
       if [ "$( brew info --json=v1 $app | jq .[0].installed[].version )" == "" ]; then
         echo "installing $app"
         brew install $app
       else
         echo "$app installed"
       fi
   #+END_SRC

   #+BEGIN_SRC sh
     done
   #+END_SRC

** Applications

   Define the list of applications we need for each platform

   #+BEGIN_SRC sh :tangle
     BASE_APP_LIST="ansible awscli dos2unix"
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     APP_LIST="${BASE_APP_LIST} default-mysql-client firejail maven openjdk-11-jdk nvidia-openjdk-8-jre python3 python3-pip gnupg gpg pass"
     FLATPAK_LIST="org.mozilla.FirefoxDevEdition org.mozilla.FirefoxNightly"
     PIP_LIST=""
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
     APP_LIST="${BASE_APP_LIST} mysql-client exercism terraform kubernetes-cli kubernetes-helm kubectx helmfile etcd"
     CASK_LIST="alfred arq balenaetcher bitwarden flux firefox-nightly firefox-beta firefox-developer-edition gitify gpg-suite-nightly iterm2-nightly keepassxc libreoffice private-internet-access razer-synapse riot slack-beta spotify standard-notes tresorit virtualbox virtualbox-extension-pack xquartz zoomus"
   #+END_SRC

** Install Applications

   Install the applications we defined earlier

   #+BEGIN_SRC sh
     for app in $APP_LIST; do
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
       sudo apt install -y $app
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
       if [ "$( brew info --json=v1 $app | jq .[0].installed[].version )" == "" ]; then
         echo "installing $app"
         brew install $app
       else
         echo "$app installed"
       fi
   #+END_SRC

   #+BEGIN_SRC sh
     done
   #+END_SRC

** Install Flatpak Applications

   Install the Flatpak apps we using regularly on Linux

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     for app in $FLATPAK_LIST; do
       if [ ! "$( flatpak list | grep $app )" ]; then
         echo "$app not installed"
         echo "installing $app"
         sudo flatpak install $app
       fi
     done
   #+END_SRC

** Install Brew Cask Applications

   Install the apps we using regularly on MacOS

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
     for app in $CASK_LIST; do
       if [ ! "$( brew cask list | grep $app )" ]; then
         echo "$app not installed"
         echo "installing $app"
         brew cask install $app
       fi
     done
   #+END_SRC

** Install Pip Applications

   Install the Pip apps we using regularly on Linux

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     for app in $PIP_LIST; do
       if [ ! "$( pip3 list | grep $app )" ]; then
         echo "$app not installed"
         echo "installing $app"
         sudo pip3 install $app
       fi
     done
   #+END_SRC

** Install Keybase

   Install Keybase

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
     if [ $(which keybase) ]; then
       echo "keybase already installed"
     else
       brew cask install keybase
     fi
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     if [ $(which keybase) ]; then
       echo "keybase already installed"
     else
       echo "installing keybase"
       curl --remote-name https://prerelease.keybase.io/keybase_amd64.deb
       sudo dpkg -i keybase_amd64.deb
       sudo apt-get install -f
       run_keybase
     fi
   #+END_SRC

** Install Other Linux Applications

*** Install Zoom

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     if [ $(which zoom) ]; then
       echo "zoom already installed"
     else
       echo "installing zoom"
       curl --remote-name https://zoom.us/client/latest/zoom_amd64.deb
       sudo dpkg -i zoom_amd64.deb
       sudo apt-get install -f
     fi
   #+END_SRC

*** Install Spotify

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     if [ $(which spotify) ]; then
       echo "spotify already installed"
     else
       echo "installing spotify"
       curl -sS https://download.spotify.com/debian/pubkey.gpg | sudo apt-key add -
       echo "deb http://repository.spotify.com stable non-free" | sudo tee /etc/apt/sources.list.d/spotify.list
       sudo apt-get update
       sudo apt-get install spotify-client
     fi
   #+END_SRC

** Install Docker

   Make sure we have Docker installed

   #+BEGIN_SRC sh :tangle (when (eq system-type 'darwin) "yes")
     if [ "$( brew cask list | grep 'docker-edge' )" ]; then
       echo "docker already installed"
     else
       brew cask install docker-edge
     fi
     if [ ! -f $(brew --prefix)/etc/bash_completion.d/docker ]; then
       echo "setting up bash completion for docker"
       docker_etc=/Applications/Docker.app/Contents/Resources/etc
       ln -s $docker_etc/docker.bash-completion $(brew --prefix)/etc/bash_completion.d/docker
       ln -s $docker_etc/docker-machine.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-machine
       ln -s $docker_etc/docker-compose.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-compose
     fi
   #+END_SRC

   #+BEGIN_SRC sh :tangle (when (eq system-type 'gnu/linux) "yes")
     if [ $(which docker) ]; then
       echo "docker already installed"
     else
       echo "Installing docker"
       sudo apt install -y docker.io docker-compose
       sudo usermod -aG docker $USER
     fi
   #+END_SRC

** Install asdf

   Install asdf and the plugins we would like

   #+BEGIN_SRC sh
     ASDF_DIR=$HOME/.asdf
     if [ -e $ASDF_DIR ]; then
       echo "Updating $ASDF_DIR"
       asdf update
     else
       echo "Installing ASDF"
       git clone https://github.com/asdf-vm/asdf.git $ASDF_DIR
       cd $ASDF_DIR
       git checkout "$(git describe --abbrev=0 --tags)"
     fi
     ASDF_PLUGINS='ruby'
     for plugin in $ASDF_PLUGINS; do
       if [ -e $ASDF_DIR/plugins/$plugin ]; then
         echo "asdf $plugin plugin already installed"
         asdf plugin-update $plugin
       else
         echo "installing asdf $plugin plugin"
         asdf plugin-add $plugin
       fi
     done
   #+END_SRC

** Install Kind

   Make sure Kind is installed so we can run a local Kubernetes cluster

   #+BEGIN_SRC sh
     KIND_VERSION='v0.7.0'
     if [ $( which kind ) ]; then
         INSTALLED_KIND=$( kind version )
     else
         INSTALLED_KIND=''
     fi

     if [ "$INSTALLED_KIND" == "$KIND_VERSION" ]; then
       echo "kind $KIND_VERSION already installed"
     else
       echo "installing kind version $KIND_VERSION"
       curl -Lo /tmp/kind-${KIND_VERSION} https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-${OS_TYPE}
       chmod +x /tmp/kind-${KIND_VERSION}
       mv /tmp/kind-${KIND_VERSION} ${HOME}/bin/kind
     fi
   #+END_SRC
